from flask import Flask
from config import Config


# DATABASE--------------------------
from flask_sqlalchemy import SQLAlchemy
from flask_migrate import Migrate
import psycopg2 # just for future db connection with postgres
# to initialize a new db run on the terminal 'flask db upgrade':it will execute the script auto generated by the migration engine
try:
    db = SQLAlchemy()   
    migrate = Migrate() 

except psycopg2.DatabaseError as exeption:
    print ('database connection error')
    raise exeption 
#-----------------------------------

# Login
from flask_login import LoginManager 

#log erors
import logging
from logging.handlers import SMTPHandler, RotatingFileHandler
import os

#email support
from flask_mail import Mail

#bootstrap
from flask_bootstrap import Bootstrap

# Timezone 
from flask_moment import Moment

#language supp
from flask_babel import Babel, _, lazy_gettext as _l
from flask import request



def create_app(config_class = Config):
    """creation of the app istance in a function instead using a global variable

    :param config_class: the config for the app istance, defaults to Config
    :type config_class: Config, optional
    """
    app = Flask(__name__)
    app.config.from_object(config_class) # import configs from the Class Config in the as-named module. the values are accessed with a dict-like statement (app.config['SECRET_KEY'])

    db.init_app(app)
    migrate.init_app(app, db)
    login.init_app(app)
    mail.init_app(app)
    moment.init_app(app)
    babel.init_app(app)
    bootstrap.init_app(app)
